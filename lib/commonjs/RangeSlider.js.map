{"version":3,"sources":["RangeSlider.tsx"],"names":["Slider","RangeSlider","min","max","onChange","tintColor","tintColorBetweenHandles","step","handleBorderColor","handleColor","handleDiameter","handleBorderWidth","type","selectedMaximum","selectedMinimum","minLabelColor","maxLabelColor","lineHeight","prefix","suffix","hideLabels","maxLabelFont","minLabelFont","maxLabelFontSize","minLabelFontSize","lineBorderWidth","lineBorderColor","labelPadding","minDistance","maxDistance","leftHandleColor","rightHandleColor","leftHandlePressedColor","rightHandlePressedColor","handlePressedColor","minStartValue","maxStartValue","fixGap","style","cornerRadius","defaultStyle","width","height","handleChange","nativeEvent","Platform","OS","Number","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Platform, requireNativeComponent } from 'react-native';\nimport { RangeSliderProps, RangeSliderChangeEvent } from './types';\n\nconst Slider = requireNativeComponent('RNRangeSlider');\n\nconst RangeSlider: React.FC<RangeSliderProps> = ({\n  min,\n  max,\n  onChange,\n  tintColor,\n  tintColorBetweenHandles,\n  step,\n  handleBorderColor,\n  handleColor,\n  handleDiameter,\n  handleBorderWidth,\n  type = 'range',\n  selectedMaximum,\n  selectedMinimum,\n  minLabelColor,\n  maxLabelColor,\n  lineHeight,\n  prefix,\n  suffix,\n  hideLabels,\n  maxLabelFont,\n  minLabelFont,\n  maxLabelFontSize,\n  minLabelFontSize,\n  lineBorderWidth,\n  lineBorderColor,\n  labelPadding,\n  minDistance,\n  maxDistance,\n  leftHandleColor,\n  rightHandleColor,\n  leftHandlePressedColor,\n  rightHandlePressedColor,\n  handlePressedColor,\n  minStartValue,\n  maxStartValue,\n  fixGap,\n  style = {},\n  cornerRadius,\n}: RangeSliderProps) => {\n  const defaultStyle = {\n    width: '100%',\n    height: 70,\n  };\n  const handleChange = ({ nativeEvent }: RangeSliderChangeEvent) => {\n    onChange && onChange(nativeEvent.min, nativeEvent.max);\n  };\n\n  if (Platform.OS === 'android') {\n    return (\n      <Slider\n        min={Number(min)}\n        max={Number(max)}\n        step={Number(step)}\n        tintColor={tintColor}\n        tintColorBetweenHandles={tintColorBetweenHandles}\n        handleColor={handleColor}\n        onChange={handleChange}\n        leftHandleColor={leftHandleColor}\n        rightHandleColor={rightHandleColor}\n        minStartValue={minStartValue}\n        maxStartValue={maxStartValue}\n        fixGap={fixGap}\n        leftHandlePressedColor={leftHandlePressedColor}\n        rightHandlePressedColor={rightHandlePressedColor}\n        handlePressedColor={handlePressedColor || handleColor}\n        cornerRadius={cornerRadius}\n        prefix={prefix}\n        suffix={suffix}\n        style={[defaultStyle, style]}\n      />\n    );\n  } else {\n    return (\n      <Slider\n        disableRange={type === 'slider'}\n        minValue={Number(min)}\n        maxValue={Number(max)}\n        step={Number(step)}\n        selectedMaximum={selectedMaximum}\n        selectedMinimum={selectedMinimum}\n        tintColor={tintColor}\n        tintColorBetweenHandles={tintColorBetweenHandles}\n        handleBorderColor={handleBorderColor}\n        handleBorderWidth={handleBorderWidth}\n        handleColor={handleColor}\n        handleDiameter={handleDiameter}\n        minLabelColour={minLabelColor}\n        minLabelFont={minLabelFont}\n        minLabelFontSize={minLabelFontSize}\n        maxLabelFont={maxLabelFont}\n        maxLabelFontSize={maxLabelFontSize}\n        maxLabelColour={maxLabelColor}\n        lineHeight={lineHeight}\n        lineBorderWidth={lineBorderWidth}\n        lineBorderColor={lineBorderColor}\n        prefix={prefix}\n        suffix={suffix}\n        hideLabels={hideLabels}\n        labelPadding={labelPadding}\n        minDistance={minDistance}\n        maxDistance={maxDistance}\n        onChange={handleChange}\n        style={[defaultStyle, style]}\n      />\n    );\n  }\n};\n\nRangeSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 1,\n  type: 'range',\n  selectedMinimum: 0,\n  selectedMaximum: 100,\n  tintColor: '#DCDCDC', // extra light gray\n};\n\nexport default RangeSlider;\n"]}